package todo;

import done.ClockInput;
import done.ClockOutput;
import se.lth.cs.realtime.semaphore.Semaphore;

public class SetTimeThread extends Thread {
	private ClockThread clock;
	private static ClockInput input;
	private static ClockOutput output;
	private static Semaphore sem;

	public SetTimeThread(ClockThread c, ClockInput i, ClockOutput o) {
		clock = c;
		input = i;
		output = o;
		sem = input.getSemaphoreInstance();
	}

	public void run() {
		int lastMode = -1;
		while (true) {
			if (lastMode != input.getChoice()) {

				if (input.getChoice() == ClockInput.SHOW_TIME) {
					lastMode = ClockInput.SHOW_TIME;
					System.out.println("BEFORE TAKE");
					sem.take();
					System.out.println("AFTER TAKE");
					System.out.println("VALUE: " + input.getValue());
					clock.setTime(input.getValue());

				}

				if (input.getChoice() == ClockInput.SET_TIME) {
					lastMode = ClockInput.SET_TIME;
					// sem.give();
				}

			}

		}
	}

}
