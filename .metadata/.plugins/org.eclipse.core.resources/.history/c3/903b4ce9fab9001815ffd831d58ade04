package todo;

import done.*;
import se.lth.cs.realtime.semaphore.Semaphore;

public class AlarmClock extends Thread {

	private static ClockInput input;
	private static ClockOutput output;
	private static Semaphore sem;
	private int lastChoice;

	public AlarmClock(ClockInput i, ClockOutput o) {
		input = i;
		output = o;
		sem = input.getSemaphoreInstance();
	}

	// The AlarmClock thread is started by the simulator. No
	// need to start it by yourself, if you do you will get
	// an IllegalThreadStateException. The implementation
	// below is a simple alarmclock thread that beeps upon
	// each keypress. To be modified in the lab.
	public void run() {
		SecondThread seconds = new SecondThread(output);
		seconds.start();
		while (true) {
			if (input.getChoice() != lastChoice) {

				if (input.getChoice() == ClockInput.SHOW_TIME) {
					sem.take();
					System.out.println("SEM TAKEN, WAITING FOR GIVE");

					System.out.println("CALLING SET TIME");
					seconds.setTime(input.getValue());
				}
				
				if (input.getChoice() == ClockInput.SET_TIME) {
					sem.give();
					System.out.println("SEM GIVEN");
				}
			}

		}
	}
}
